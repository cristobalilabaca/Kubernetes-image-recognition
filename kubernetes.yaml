apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: gcr.io/iap-test-338320/frontimg
        ports:
        - containerPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  labels:
    app: backend
spec:
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      volumes:
      - name: sa-volume
        secret:
          secretName: iam-key
      containers:
      - name: backend-container
        image: gcr.io/iap-test-338320/backend
        ports:
        - containerPort: 8000
        env: 
        - name: DATABASE_URL
          value: postgres://postgres:postgres@//cloudsql/iap-test-338320:us-central1:imagedb/images_db
        - name: GS_BUCKET_NAME
          value: image_classificator
        - name: SECRET_KEY
          value: ksrzyBRkvyiavJdQQpHViuSubsWXpAIxDzbsuzfHQgUTeiUwRQ
        - name: PORT
          value: "8000"
        - name: USE_CLOUD_SQL_AUTH_PROXY
          value: "true"
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: s1
              key: password
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: s1
              key: database 
      - name: cloud-sql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.28.0
        command:
          - "/cloud_sql_proxy"
          - "-instances=iap-test-338320:us-central1:imagedb=tcp:5432"
          - "-enable_iam_login"
          - "-credential_file=/secrets/service_account.json"
        securityContext:
          runAsNonRoot: true
        volumeMounts:
        - name: sa-volume
          mountPath: /secrets/
          readOnly: true
        resources:
          requests:
            memory: "2Gi"
---
apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
  type: LoadBalancer
  loadBalancerIP: 35.238.155.247
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  annotations:
    cloud.google.com/backend-config: '{"default": "config-default"}'
    # cloud.google.com/neg: '{"ingress": true}'
spec:
  selector:
    app: frontend
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30001
      protocol: TCP
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: basic-ingress
spec:
  defaultBackend:
    service:
      name: frontend
      port:
        number: 30001
---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: config-default
  namespace: default
spec:
  iap:
    enabled: true
    oauthclientCredentials:
      secretName: iap-secrets